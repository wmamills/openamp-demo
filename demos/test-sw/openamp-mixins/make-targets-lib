# this file is used by make-image-targets
# do not try to run it on its own
# use: make-image-targets dir
# where dir is the directory this file is in

# uncomment to keep the working dirs for debug
#KEEP_DIRS=y

hack-base() {
    echo "Hacking"
    rm -rf xxx-temp/boot/*
    rm -rf xxx-temp/lib/firmware/*

    # give the user login hints
    echo "(Login as root with no password)" >>xxx-temp/etc/issue

    # configure ash shell to look for .ashrc
    mkdir -p xxx-temp/etc/profile.d
    echo "export ENV=.ashrc" >xxx-temp/etc/profile.d/10-ashrc.sh

    # provide a default .ashrc for the root user
    mkdir -p xxx-temp/home/root
    cp $MIXINS/def_root_ashrc xxx-temp/home/root/.ashrc
}

rm-modules() {
    echo "Remove all modules"
    rm -rf xxx-temp/lib/modules/*
}

trim-modules() {
    echo "Trim modules"
    rm -rf xxx-temp/lib/modules/*/kernel/drivers/gpu
}

add_firmware() {
    # for now we use the same zephyr firmware for kv260 and zcu102
    OFS=../test-sw/openamp-firmware/kv260_r5
    XFS=../test-sw/xilinx-firmware/

    # populate the Openamp firmware
    for i in rpmsg_multi_services.elf zephyr-hello.elf; do
        cp $OFS/$i $DF/
    done

    # populate Xilinx bare metal lockstep firmware
    for i in image_echo_test image_matrix_multiply image_rpc_demo; do
        cp $XFS/$BOARD-lockstep/$i $DF/
    done

    # populate Xilinx bare metal split firmware
    for i in split_rpu0.elf split_rpu1.elf; do
        cp $XFS/$BOARD-split/$i $DF/
    done
}

do_vfat() {
    # defaults
    : ${KERNEL:=Image}
    : ${VENDOR:=petalinux}

    # create the FAT partition contents
    DV=$D/vfat
    rm -rf generated/vfat
    mkdir -p $DV
    cp tftp/$BOARD/initrd.cpio.gz $DV
    cp -L tftp/$BOARD/openamp/$KERNEL $DV
    mkdir -p $DV/dtb
    cp -L tftp/$BOARD/dtb/${BOARD}*.dtb $DV/dtb
    cp sdcard/uEnv.txt $DV
    (cd ../test-sw/sd-card/$BOARD; ./update.sh)
    cp ../test-sw/sd-card/$BOARD/boot-uenv.scr $DV/boot.scr
    if [ -e ../test-sw/$VENDOR/$BOARD/boot.bin ]; then
        cp ../test-sw/$VENDOR/$BOARD/boot.bin $DV
    fi

    new-vfat $D/boot.vfat 123M BOOT $DV
}

do_sdcard() {
    do_vfat
    new-mbr-image sdcard/demo.img 128M $D/boot.vfat
}
